- COMPONENTS
- CONTAINERS
- EVENT LISTNER
- SWING
- LAYOUTS
- JFRAME,JPANEL
- EVENT HANDLER
- ADAPTER CLASS
- APPLET

-------------------------------->start
------------------
------------------
----------------------->theory
-------------------------------->end

-------------------------------->start
------------------
  APPLET
------------------
----------------------->theory
Applet : Applets are small java programs which are executed and displayed in a java compatible web browser.

class MyApplet extends Applet
{
//applet methods
}

init( )
Automatically called to perform initialization of the applet. Executed only  once.

start( )
Called every time the applet moves into sight on the Web browser to allow the applet to start up its normal operations.

stop( )
Called every time the applet moves out of sight on the Web browser to allow the applet to shut off expensive operations.

destroy( ) Called when the applet is being unloaded from the page to perform final release of resources when the applet is no longer used.

paint()
Called each time the applets output needs to be redrawn.


-------------------------------->end

-------------------------------->start
------------------
  ADAPTER CLASS
------------------
----------------------->theory

The Adapter classes provided by AWT are as follows:
java.awt.event.ComponenentAdapter
java.awt.event.ContainerAdapter
java.awt.event.FocusAdapter
java.awt.event.KeyAdapter
java.awt.event.MouseAdapter
java.awt.event.MouseMotionAdapter
java.awt.event.WindowAdapter

-------------------------------->end

-------------------------------->start
------------------
  EVENT HANDLER
------------------
----------------------->theory
1.Low-Level Events: Low-level events represent direct communication from user. A low level event is a key press or a key release, a mouse click, drag, move or release, and so on.

ComponentEvent => Indicates that a component object (e.g. Button, List, TextField) is moved, resized, rendered invisible or made visible again.
FocusEvent => Indicates that a component has gained or lost the input focus.
KeyEvent => Generated by a component object (such as TextField) when a key is pressed, released or typed.
MouseEvent => Indicates that a mouse action occurred in a component. E.g. mouse is pressed, releases, clicked (pressed and released), moved or dragged.
ContainerEvent => Indicates that a container’s contents are changed because a component was added or removed.
WindowEvent => Indicates that a window has changed its status. This low level event is generated by a Window object when it is opened, closed, activated, deactivated, iconified, deiconified or when focus is transferred into or out of the Window.

2. High-Level Events: High-level (also called as semantic events) events encapsulate
the meaning of a user interface component. These include following events.

ActionEvent = Indicates that a component-defined action occurred. This high- level event is generated by a component (such as Button) when the component-specific action occurs (such as being pressed).

AdjustmentEvent = The adjustment event is emitted by Adjustable objects like scrollbars.
ItemEvent = Indicates that an item was selected or deselected. This high- level event is generated by an ItemSelectable object (such as a List) when an item is selected or deselected by the user.

TextEvent = Indicates that an object’s text changed. This high-level event is generated by an object (such as TextComponent) when its text changes.


ComponentListener
componentResized(ComponentEvent e)
componentMoved(ComponentEvent e)
componentShown(ComponentEvent e)
componentHidden(ComponentEvent e)

FocusListener
focusGained(FocusEvent e) Invoked
focusLost(FocusEvent e)

KeyListener
keyTyped(KeyEvent e)
keyPressed(KeyEvent e )
keyReleased (KeyEvent e)

MouseListener
mouseClicked(MouseEvent e)
mousePressed(MouseEvent e)
mouseReleased(MouseEvent e)
mouseEntered(MouseEvent e)
mouseExited(MouseEvent e)
MouseMotionListener
mouseDragged(MouseEvent e)
mouseMoved(MouseEvent e)

ContainerListener
componentAdded(ContainerEvent e)
componentRemoved(ContainerEvent e)

WindowListener
windowOpened(WindowEvent e)
windowClosing(WindowEvent e)
windowClosed(WindowEvent e)
windowIconified(WindowEvent e)
windowDeiconified(WindowEvent e)
windowActivated(WindowEvent e)
windowDeactivated(WindowEvent e)

ActionListener
actionPerformed(ActionEvent e)

ComponentListsner
itemStateChanged(ActionEvent e)

AdjustmentListener
adjustmentValueChanged(ActionEvent e)

TextListener
textValueChanged(ActionEvent e)


-------------------------------->end

-------------------------------->start
------------------
  JFRAME,JPANEL
------------------
----------------------->theory
JFRAME

This is a top-level container which can hold components and containers like panels.

JFrame()
JFrame(String title)

setSize(int width, int height) - Specifies size of the frame in pixels.
setLocation(int x, int y) - Specifies upper left corner
setVisible(boolean visible) - Set true to display the frame
setTitle(String title) - Sets the frame title
setDefaultCloseOperation(int mode) - Specifies the operation when frame is closed.

The modes are: 
JFrame.EXIT_ON_CLOSE
JFrame.DO_NOTHING_ON_CLOSE
JFrame.HIDE_ON_CLOSE
JFrame.DISPOSE_ON_CLOSE

JPANEL
This is a middle-level container which can hold components and can be added to other containers like frame and panels.
public javax.swing.JPanel(java.awt.LayoutManager, boolean);
public javax.swing.JPanel(java.awt.LayoutManager);
public javax.swing.JPanel(boolean);
public javax.swing.JPanel();

Important Components:
- Label
- Button
- Check boxes
- Radio Buttons

Label: With the JLabel class, you can display unselectable text and images.
JLabel(Icon i)
JLabel(Icon I , int n)
JLabel(String s)
JLabel(String s, Icon i, int n)
JLabel(String s, int n)
JLabel()

The int argument specifies the horizontal alignment of the label's contents within its drawing area; 
defined in the SwingConstants interface (which JLabel implements):
LEFT (default), CENTER, RIGHT, LEADING, or TRAILING.

Methods:
1. Set or get the text displayed by the label.
  void setText(String) 
  String getText()

2. Set or get the image displayed by the label.
  void setIcon (Icon) 
  Icon getIcon()

3. Set or get the image displayed by the label when it's disabled. If you don't specify a disabled image, then the look-and-feel creates one by manipulating the default image.
  void setDisabledIcon(Icon) 
  Icon getDisabledIcon()
  
4. Set or get where in the label its contents should be placed. For vertical alignment:

TOP, CENTER (the default), and BOTTOM.

void setHorizontalAlignment(int)
void setVerticalAlignment(int)
int getHorizontalAlignment()
int getVerticalAlignment()

Button: A Swing button can display both text and an image. The underlined letter in each button's text shows the mnemonic which is the keyboard alternative.

JButton(Icon I)
JButton(String s)
JButton(String s, Icon I)

void setDisabledIcon(Icon)
void setPressedIcon(Icon)
void setSelectedIcon(Icon)
void setRolloverIcon(Icon)
String getText()
void setText(String)

Event- ActionEvent

Check boxes: JCheckBox

JCheckBox(Icon i)
JCheckBox(Icon i,boolean state)
JCheckBox(String s)
JCheckBox(String s, boolean state)
JCheckBox(String s, Icon i)
JCheckBox(String s, Icon I, boolean state)

void setSelected(boolean state)
String getText()
void setText(String s)

Event- ItemEvent

Radio Buttons: JRadioButton

JRadioButton (String s)
JRadioButton(String s, boolean state)
JRadioButton(Icon i)
JRadioButton(Icon i, boolean state)
JRadioButton(String s, Icon i)
JRadioButton(String s, Icon i, boolean state)
JRadioButton()

To create a button group- ButtonGroup()
Adds a button to the group, or removes a button from the group.
void add(AbstractButton)
void remove(AbstractButton)

Combo Boxes: JComboBox

JComboBox()

void addItem(Object)
Object getItemAt(int)
Object getSelectedItem()
int getItemCount()

Event- ItemEvent

List: JList(ListModel)
List models-
  1. SINGLE_SELECTION - Only one item can be selected at a time. When the user selects an item, any previously selected item is deselected first.
  2. SINGLE_INTERVAL_SELECTION- Multiple, contiguous items can be selected. When the user begins a new selection range, any previously selected items are deselected first.
  3. MULTIPLE_INTERVAL_SELECTION- The default. Any combination of items can be selected. The user must explicitly deselect items.
  
boolean isSelectedIndex(int)
void setSelectedIndex(int)
void setSelectedIndices(int[])
void setSelectedValue(Object, boolean)
void setSelectedInterval(int, int)
int getSelectedIndex()
int getMinSelectionIndex()
int getMaxSelectionIndex()
int[] getSelectedIndices()
Object getSelectedValue()
Object[] getSelectedValues()

// EXAMPLE

listModel = new DefaultListModel();
listModel.addElement("India");
listModel.addElement("Japan");
listModel.addElement("France");
listModel.addElement("Denmark");
list = new JList(listModel);

Event- ActionEvent

Text: JTextComponent

JTextField

JTextField()
JTextField(String)
JTextField(String, int)
JTextField(int)
JTextField(Document, String, int)

JPasswordField

JPasswordField()
JPasswordField(String)
JPasswordField(String, int)
JPasswordField(int)
JPasswordField(Document, String, int)

1. Set or get the text displayed by the text field.
	void setText(String) String getText()

2. Set or get the text displayed by the text field.
	char[] getPassword()

3. Set or get whether the user can edit the text in the text field.
	void setEditable(boolean) boolean isEditable()

4. Set or get the number of columns displayed by the text field.
This is really just a hint for computing the field's preferred
width.
	void setColumns(int); int getColumns()

5. Get the width of the text field's columns.
This value is established implicitly by the font.
	int getColumnWidth()

6. Set or get the echo character i.e. the character displayed
instead of the actual characters typed by the user.
	void setEchoChar(char) char getEchoChar()

JTextArea

JTextArea (int row, int cols)
JTextArea (String s, int row, int cols)

void setColumns (int cols)
void setRows (int rows)
void append(String s)
void setLineWrap (boolean)

Dialog Boxes:

Swing has a JOptionPane class, that lets you put a simple dialog box.

1. static void showMessageDialog()- Shows a message with ok button.
2. static int showConfirmDialog()- shows a message & gets users options from set of options.
3. static int showOptionDialog- shows a message & get users options from set of options.
4. String showInputDialog()- shows a message with one line of user input.

Menu:
- Creating and Setting Up Menu Bars

Creating and Setting Up Menu Bars

JMenuBar() :  Creates a menu bar.
JMenu add(JMenu) : Creates a menu bar.
JMenuBar getJMenuBar()
void setJMenuBar(JMenuBar) : Sets or gets the menu bar of an applet,
dialog, frame, internal frame, or root pane.

JMenu(String)
Creates a menu. The string specifies the text to display for the menu.

JMenuItem add(JMenuItem)
JMenuItem add(Action)
JMenuItem add(String)
Adds a menu item to the current end of the menu. If the argument is an Action object, then the menu creates a menu item. If the argument is a string, then the menu automatically creates a JMenuItem object that displays the specified text.

Adds a separator to the current end of the menu.
void addSeparator()

Inserts a menu item or separator into the menu at the specified position. The first menu item is at position 0, the second at position 1, and so on. The JMenuItem, Action, and String arguments are treated the same as in the corresponding add methods.
JMenuItem insert(JMenuItem,int)
JMenuItem insert(Action, int)
void insert(String, int)
void insertSeparator(int)

Removes the specified item(s) from the menu. If the argument is an integer, then it specifies the position of the menu item to be removed.
void remove(JMenuItem)
void remove(int)
void removeAll()

Creates an ordinary menu item. The icon argument, if present, specifies the icon that the menu item should display. Similarly, the string argument specifies the text that the menu item should display. The integer argument specifies the keyboard mnemonic to use. You can specify any of the relevant VK constants defined in the KeyEvent class. For example, to specify the A key, use KeyEvent.VK_A.
JMenuItem()
JMenuItem(String)
JMenuItem(Icon)
JMenuItem(String, Icon)
JMenuItem(String, int)

Creates a menu item that looks and acts like a check box. The string argument, if any, specifies the text that the menu item should display. If you specify true for the boolean argument, then the menu item is initially selected (checked). Otherwise, the menu item is initially unselected.
JCheckBoxMenuItem()
JCheckBoxMenuItem(String)
JCheckBoxMenuItem(Icon)
JCheckBoxMenuItem(String, Icon)
JCheckBoxMenuItem(String, boolean)
JCheckBoxMenuItem(String, Icon, boolean)

Creates a menu item that looks and acts like a radio button. The string argument, if any, specifies the text that the menu item should display. If you specify true for the boolean argument, then the menu item is initially selected. Otherwise, the menu item is initially unselected.
JRadioButtonMenuItem()
JRadioButtonMenuItem(String)
JRadioButtonMenuItem(Icon)
JRadioButtonMenuItem(String, Icon)
JRadioButtonMenuItem(String, boolean)
JRadioButtonMenuItem(Icon, boolean)
JRadioButtonMenuItem(String, Icon,
boolean)

Set or get the selection state of a check box menu item.
void setState(boolean)
boolean getState()
(in JCheckBoxMenuItem)

If the argument is true, enable the menu item. Otherwise, disable the menu item.
void setEnabled(boolean)

-------------------------------->end

-------------------------------->start
------------------
  LAYOUTS
------------------
----------------------->theory
Layout Manager
The job of a layout manager is to arrange components on a container. Each container has a layout manager associated with it. To change the layout manager for a container, use the setLayout() method.

setLayout(LayoutManager obj)

1. FlowLayout
4. BoxLayout
2. BorderLayout
5. CardLayout
3. GridLayout
6. GridBagLayout

JPanel p1 = new JPanel();
p1.setLayout(new FlowLayout());
p1.setLayout(new BorderLayout());
p1.setLayout(new GridLayout(3,4));

-------------------------------->end

-------------------------------->start
------------------
  SWING
------------------

----------------------->theory
Swing Architecture:

The design of the Swing component classes is based on the Model-View-Controller
architecture, or MVC.
1. The model stores the data.
2. The view creates the visual representation from the data in the model.
3. The controller deals with user interaction and modifies the model and/or the view

Swing Classes

Box : Container that uses a BoxLayout.
JApplet : Base class for Swing applets.
JButton : Selectable component that supports text/image display.
JCheckBox : Selectable component that displays state to user.
JCheckBoxMenuItem : Selectable component for a menu; displays state to user.
JColorChooser : For selecting colors.
JComboBox : For selecting from a drop-down list of choices.
JComponent : Base class for Swing components.
JDesktopPane : Container for internal frames.
JDialog : Base class for pop-up subwindows.
JEditorPane : For editing and display of formatted content.
JFileChooser : For selecting files and directories.
JFormattedTextField : For editing and display of a single line of formatted text.
JFrame : Base class for top-level windows.
JInternalFrame : Base class for top-level internal windows.
JLabel : For displaying text/images.
JLayeredPane : Container that supports overlapping components.
JList : For selecting from a scrollable list of choices.
JMenu : Selectable component for holding menu items; supports text/image display.
JMenuBar : For holding menus.
JMenuItem : Selectable component that supports text/image display.
JOptionPane : For creating pop-up messages.
JPanel : Basic component container.
JPasswordField : For editing and display of a password.
JPopupMenu : For holding menu items and popping up over components.
JProgressBar : For showing the progress of an operation to the user.
JRadioButton : Selectable component that displays state to user; included in ButtonGroup to ensure that only one button is selected.
JRadioButtonMenuItem : Selectable component for menus; displays state to user; included in ButtonGroup to ensure that only one button is selected.
JRootPane: Inner container used by JFrame, JApplet, and others.
JScrollBar : For control of a scrollable area.
JScrollPane : To provide scrolling support to another component.
JSeparator : For placing a separator line on a menu or toolbar.
JSlider : For selection from a numeric range of values.
JSpinner : For selection from a set of values, from a list, a numeric range, or a date range.
JSplitPane : Container allowing the user to select the amount of space for each of two components.
JTabbedPane : Container allowing for multiple other containers to be displayed; each container appears on a tab.
JTable : For display of tabular data.
JTextArea : For editing and display of single-attributed textual content.
JTextField : For editing and display of single-attributed textual content on a single line.
JTextPane : For editing and display of multi-attributed textual content.
JToggleButton : Selectable component that supports text/image display; selection triggers component to stay “in”.
JToolBar : Draggable container.
JToolTip : Internally used for displaying tool tips above components.
JTree : For display of hierarchical data.
JViewport : Container for holding a component too big for its display area.
JWindow : Base class for pop-up windows.



-------------------------------->end

-------------------------------->start
------------------
  EVENT LISTNER
------------------
----------------------->theory

ActionListener: Listens to action events, such as button clicks.
MouseListener: Listens to mouse-related events.
KeyListener: Listens to keyboard-related events.
ItemListener: Listens to item selection events, such as those from checkboxes and radio buttons.

// EXAMPLE
JFrame frame = new JFrame("Event Handling Example");
JButton button = new JButton("Click Me");

// Create an ActionListener for the button
ActionListener listener = new ActionListener() {
    public void actionPerformed(ActionEvent e) {
        JOptionPane.showMessageDialog(null, "Button clicked!");
    }
};

// Register the ActionListener with the button
button.addActionListener(listener);

frame.add(button);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);

-------------------------------->end

-------------------------------->start
------------------
  CONTAINERS
------------------

----------------------->theory

Containers are components that can hold other components. They provide a way to structure and organize components within your GUI. There are two main types of containers in Java:

1. Top-level Containers: These are the main windows of your application. They can be instances of JFrame, JDialog, or JApplet.

2. Intermediate Containers:
These are used to group and arrange components. They can be instances of JPanel, JScrollPane, or JSplitPane.

-------------------------------->end

-------------------------------->start
------------------
  COMPONENTS
------------------

----------------------->theory

JButton: Represents a clickable button.
JLabel: Displays text or an image.
JTextField: Allows users to input text.
JComboBox: Provides a dropdown list of items.
JCheckBox: Represents a checkbox for selecting options.
JRadioButton: Represents a radio button for selecting a single option from a group.

-------------------------------->end

AWT (Abstract Window Toolkit):
Swing is based on AWT

Different layout managers: 

FlowLayout:
  Components are placed in a single row, left to right, and wrap to the next row if necessary.
  Useful for arranging components in a simple linear flow.
  FlowLayout is the default layout manager for JPanel.

 BorderLayout
  Divides the container into five regions: NORTH, SOUTH, EAST, WEST, and CENTER.
  Each region can hold only one component
  Useful for creating basic layouts with a header, footer, and main content area.
  
 GridLayout
  Components are arranged in a grid, with a fixed number of rows and columns
  All cells in the grid have the same size.
  Useful for creating uniformly sized grids of components
  
 BoxLayout
  Arranges components either in a single column (Y_AXIS) or a single row (X_AXIS).
  Useful for creating vertically or horizontally oriented components.
 
 GroupLayout
  Provides a more flexible and dynamic way to create complex layouts.
  Designed to work well with GUI builders like Java's GroupLayout in combination with IDEs.
  
 
 EXAMPLE: 

// Simple window 

import javax.swing.*;
import java.awt.*;
public class Main {
  public static void main(String[] args) {
    JFrame frame = new JFrame("My wondow");
    frame.setSize(1270, 720);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setVisible(true);
  }
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
