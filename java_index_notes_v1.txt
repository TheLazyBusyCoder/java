//////////////////////////
/// OOPS

- Inheritance 
- Encapsulation
- Polymorphism
- Composition

______ <- when nothing is specified , package access (class available to same package)

public -> any other class in a packege can access this class

protected -> same package , any sub class in other package

private -> no other class can access

// to use class in the same package , directly use it (no import etc required)

// to create getters fast , code/generate/

this() <- to call same class constructor , from different overloading constructor from the same   class. This should be first line only.

// we can use setters in constructors

//////////////////////////
/// STATIC

instance method can access instance method  , instance variable , static methods , static variables. 

//////////////////////////
/// POJO (mini database like class)

// javaBean

// switch is an expression

Student leo = new Student("leo" , 31);

switch(variable) {
  case _ -> //code;
}

);

//////////////////////////
/// toString() <- method used with code generator 

if we do: System.out.println(objectName); <- if this class toString() => then good output will come. 

used to print the data of the class in a nicely formated way

// meta data (annoitation)

@overidden 

//////////////////////////
/// RECORD

ClassName.java

// record headder , fields are automatically set from the parameter; private and final.

public record ClassName(String name , int id) {
   
}

// to get: 

objectName.fieldName(); <- in the main file , simple

// cannot set

//////////////////////////
/// Encapsulation

- bundling of behaviour and attributes on a single object

- practice of hiding fields, some methods, from public access




//////////////////////////
/// EXCEPTION

try {

} catch(Exception e) {

}

try {

} catch(NullPointerException e) {
  
}

// Using Scanner 
import java.util.Scanner;
Scanner sc = new Scanner(System.in);

// to read from file
Scanner sc = new Scanner(new File("filename"));

// to read string
sc.nextLine(); 

//////////////////////////
/// Inheritance

- parent child relationship where child has access to parent methods and feilds

class Animal {
  String name;
  public Animal(String name) {
    this.name = name;
  }
}

public class Dog extends Animal {
  public Dog(String name) {
    super(name);
  }
}

// we can pass Dog to any method , whos argument is Animal , as Dog extends Animal 

// we can do : super.toString() => to call parent toString() method

// we can over ride methods , and use the super keyword inside the overriding method

// private fields from the parent class , cannot be accessed anywhere even in the sub class.

// protected => same package. 

//////////////////////////
/// java.lang.Object;

// every class in java is an child of Object class. 

// toString() <- by default returns the class name and hesh code of the instance

public class Main extends java.lang.Object {
  public static void main(String args[]) {

  }
}

// this keyword is only normally used for when the method has parameter. 

//////////////////////////
/// METHOD OVERRIDING VS OVERLOADING

// method overloading = same name , different parameter , return type can be different

// method overriding = (same name and same parameter is allowed) child is overloading parent method (@Override <- add this above function) (static methods cannot be overridden)

// private methods & constructors cannot be overridden 

//////////////////////////
/// POLYMORPHISM 

// mary form's 

// Animal => (dog , fish) <- many forms.

//////////////////////////
/// TEXT BOX

String variableName = """
                        This is leo: 
                          - full name: leo harry
                          - age: 19
                      """

// output will be as it is. 

System.out.printf("This is leo age: %d" , age);

System.out.printf("%6d" , 100); // each number will take a width of 6 spaces.

String name = String.format("My name is: " , "Leo");

name = "My name is leo".formatted("Leo");

//////////////////////////
/// STRINGS

lenght 
charAt() 
indexOf() 
lastIndexOf() 
  .lastIndexOf("l" , 3); // 2p = from where to start from the end; 
isEmpty() 
isBlank() (true if string only has spaces)

.contentEquals(); // matches at object level
.equals() // matches characters. 
.equalsIgnoreCase();

.contains()
.endsWith()
.startsWith()
.regionMatches()

// STRING MANIPULATION

.indent(8); // eight spaces from the start
.indent(-8); // removing eight spaces from the start

.strip()
.stripLeading()
.stripTraling()
.trim()

.toLowerCase()
.toUperCase

.concat()
String.join("/" , "leo","harry"); // leo/harry
.repeat()

.replace()
.replaceAll()
.replaceFirst()

.substring()
.subSequence()

//////////////////////////
/// STRING BUILDER

// self reference
StringBuilder name = new StringBuilder("leo");

// normal string when concat() is used , new string is created in heap , and pointer pointes to new string. 

// variable.capacity() <- on string builder
initially capacity is 16 
StringBuilder sb = new StringBuilder(32); <- 32 capacity in memory (more memory)

.delete()
.deleteCharAt()
.insert() // insert text at a specific position
.reverse() 
.setLength() // fill out empty spaces at left. 

//////////////////////////
/// COMPOSITION

// small classes making a big class (product)

// small classes are variables of PC class. 

class PC extends SomeClass {
  private ClassOne C1;
  private ClassTwo C2;
  private ClassThree C3;

  ClassOne getC1() {
    return C1;
  }
}

USE:

// in main() 

// objects of small classes with data set. 

// object of PC passing the small class to the constructor

// using get on PC to get the instance of C1 then using the function in C1

// PC.getC1().methodInsideC1();

//////////////////////////
/// ENCAPSULATION 

// hide un necessary details 

// setting fields to private so that objects dont have direct access to fields. 

// the code using that class , should not be damaged , even if the class is changed 



//////////////////////////
/// POLYMORPHISM

// many forms 

// code to call a method , but at runtime , this method's behaviour can be different, for different objects. 

// to get class name at runtime 
String instanceType = this.getClass().getSimpleName();
// this will give the sub class name. 

we can assign child class to parent object.

Movie adv = new Advanture("title");
adv.watchMovie(); // this method is overriden in the child class , 

watch Movie() {
  super("title");
  // some extra code
}

// behaviour is of advanture movie behaviour 

// we can use switch statment to return childs ojbect from the parent , based of requestred data. 

// factory methods 

public static void getMovie(Stirng title , String type) {
  return switch(type.toUpperCase().charAt(0)) {
    case 'A' -> new FunneyMovie(title); 
    case 'B' -> new SomeOther(title); 
  }
}

Movie mv = Movie.getMovie("someTitle"); // static method

//////////////////////////
/// CASTING IN CLASS 

// we can cast in classes 

Adv ad = Movie.getMovie("A" , "title"); <- this will give error , because compiler dont know what will this method return 

Adv ad = (Adv)Movie.getMovie("A" , "title"); <- this is casting . 

// ClassCastException 

// When we cast to different sub classes , (Fun) but Adv is object this happens 

// var
// by using var we tell java to decide compile time , variable type .

var mv = Movie.getMovie("C" , "someTitle"); 
mv.watchMovie();

// instanceof 

unknownObject instanceof Adventure; // true if the uO is instance of Adventure; 

// if we give variable name , we dont need to cast

unknownObject instanceof Adventure adv; 
adv.methodName();

//////////////////////////
/// ARRAY

// initilize the default value = 0

int[] array = new int[10];

int[] array = new int[]{1,2,34,5,6};

int[] array;
array = new int[]{1,2,3,4,5};

//////////////////////////
/// INHANSED FOR LOOP / FOR EACH LOOP

for(declaration : collection) {

}

// for more functions 
import java.util.Arrays;

int[] array = {1,2,3};
String s = Arrays.toString(array);
System.out.println(s);
output: [1, 1, 1]

Object[] obj = new Object[3];
obj[0] = "string";
obj[1] = 1;
obj[2] = new MyOwnClassInstance();

import java.util.Arrays;

import java.util.Random;
Random random = new Random();
random.nextInt(100);  //100 = bound x<100

Arrays.sort(array); // sort the original array

Arrays.fill(array , 5); // set all array values to 5

int[] array_one = Arrays.copyOf(array_two , array_one.length);

Arrays.binarySearch(); // +ve = found , -ve = notfound , array must be sorted  

Arrays.equals(s1 , s2); // check if 2 arrays are equal. 

// reference
int[] a = new int[5];
int[] b = a;

//////////////////////////
/// VARIABLE ARGUMENTS (REST OPERATOR)

public static void main(String... args){

}

Arrays.deepToString(); // to print multidimensional array. 



-----------------------------------------------


- variables: {
  description: "basic theory and understanding of variables in java",
  [WRAPPER CLASS , CASTING  , STRING],
}

- methods: {
  [METHOD OVERLOADING]
}

- switch: {
  des: "new way of switch",
}

- getting input: {
  des: "how to get user input",
}

- WC Integer {
  des: "about Integer wrapper class"
}

- CLASS SYSTEM {
  des: "Understanding System. "
}

__________________________________________________start
-----------------------
| CLASS SYSTEM |
-----------------------

-------------------->THEORY:
System.in -> this can read inputs from the terminal 

-------------------->CODE:

__________________________________________________end



__________________________________________________start
-----------------------
| WC Integer |
-----------------------

-------------------->THEORY:
// to get number from string
Integer.parseInt("21");

-------------------->CODE:

__________________________________________________end



__________________________________________________start
-----------------------
| getting input |
-----------------------

-------------------->THEORY:

// using Console (use terminal )
String name = System.console().readLine("Hi what is your name?: ");


// using Scanner




-------------------->CODE:

__________________________________________________end


__________________________________________________start
-----------------------
| switch |
-----------------------

-------------------->CODE:

////////////////////////
/// CONTROL FLOW

// switch (switch is an expression)

switch(value) {
	case x:
		break;
	case y: 
		break;
	default: 
}

// new switch
// if you want to return somthing from switch
return switch(value) {
	case x -> {
	
	}
	case y -> {
	
	}
	default -> ; 
}

// default is necessary
// yield is new keyword for return somthing from a switch

return switch(month) {
      case "september" -> "sep";
      default -> {
        System.out.println("bad month");
        yield "non";
      };
    };

__________________________________________________end



__________________________________________________start
-----------------------
| methods |
-----------------------
- METHOD OVERLOADING
-------------------->THEORY:
/////////////////////////////////////////
/// METHOD OVERLOADING

- should have same return type 
- should not have same number of parameter with different name


-------------------->CODE:

__________________________________________________end


__________________________________________________start
-----------------------
| variables |
-----------------------
- WRAPPER CLASS
- CASTING
- STRING
-------------------->THEORY:
javadoc: https://docs.oracle.com/javase/specs/jls/se17/html/jls-3.html#jls-3.9

int number = 5;

primitive data types: 
byte short int long (whole numbers) float double (real numbers) char boolean

Integer.MIN_VALUE (minimum int value) 
Integer.MAX_VALUE

//////////////////////////
/// WRAPPER CLASS

byte Byte.
int Integer. 
char Character.
etc

value will overflow when you add 2 numbers greater then the storage capacity of java. 

int salary = 10,500 (wrong)
int salary = 10_500 (valid)

byte  = smallest
Byte.MIN_VALUE
Byte.MAX_VALUE

-128 to 127

short  = 
int = default
long  = largest range
long myBigNumber = 100L;
Long.SIZE // width of long

//////////////////////////
/// CASTING

int integer = (int) (7/2);


float (32)
double (64)

sintific notations: 

23E38 => 23 * 10^38

double myDouble = 35D;

char name = 'L';
char unicode = '\u84393'; // unicode
char character = 46;  // we can do this

boolean flag = true; 

//////////////////////////
/// STRING

String name = "leo";

System.out.println("10" + 10);  // 1010
System.out.println('A' + 'A');  // some number
System.out.println("" + 'A' + 'A');  // it will be converted to a string => AA

//////////////////////////
/// ABBREVATION OPERATOR

number++; 
number+=2;

__________________________________________________end

